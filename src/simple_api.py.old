"""
Simple API for Codette with BioKinetic routing
"""
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import logging
from datetime import datetime

from codette import Codette
from codette_imports import import_manager

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize FastAPI app with CORS
app = FastAPI(title="Codette API")
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Initialize Codette
codette = None

class Query(BaseModel):
    text: str

async def get_codette() -> Codette:
    """Get or create Codette instance"""
    global codette
    if codette is None:
        codette = import_manager.create_system()
        if codette is None:
            raise HTTPException(status_code=500, detail="Failed to initialize Codette")
        await codette.initialize()
    return codette

@app.post("/ask")
async def ask(query: Query):
    """Process a question through BioKinetic routing"""
    try:
        ai = await get_codette()
        result = ai.respond(query.text)
        
        return {
            "response": result["response"],
            "metrics": result["metrics"],
            "timestamp": str(datetime.now())
        }
        
    except Exception as e:
        logger.error(f"Error processing query: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/health")
async def health_check():
    """Health check with component status"""
    try:
        ai = await get_codette()
        components = import_manager.get_available_systems()
        
        return {
            "status": "healthy",
            "components": components,
            "timestamp": str(datetime.now())
        }
        
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return {
            "status": "unhealthy",
            "error": str(e),
            "timestamp": str(datetime.now())
        }

@app.on_event("shutdown")
async def shutdown_event():
    """Clean shutdown of Codette"""
    global codette
    if codette:
        await codette.shutdown()
        codette = None

# Server initialization
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        app,
        host="127.0.0.1",
        port=9000,
        log_level="info"
    )