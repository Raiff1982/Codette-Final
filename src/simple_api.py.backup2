"""
Simplified Codette server with proper async handling
"""
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import logging
import asyncio
from datetime import datetime

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize FastAPI app with CORS
app = FastAPI(title="Codette API")
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

class Query(BaseModel):
    text: str

@app.post("/ask")
async def ask(query: Query):
    """Process a question and return a response"""
    try:
        # For now, just echo with timestamp
        timestamp = datetime.now().strftime("%H:%M:%S")
        response = f"[{timestamp}] Received: {query.text}"
        logger.info(f"Processing query: {query.text}")
        return {"response": response}
    except Exception as e:
        logger.error(f"Error processing query: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/health")
async def health_check():
    """Basic health check endpoint"""
    return {"status": "healthy", "timestamp": str(datetime.now())}

# Proper server initialization
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        app,
        host="127.0.0.1",
        port=9000,
        log_level="info"
    )